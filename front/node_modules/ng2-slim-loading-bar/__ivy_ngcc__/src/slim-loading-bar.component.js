// Copyright (C) 2016 Sergey Akopkokhyants
// This project is licensed under the terms of the MIT license.
// https://github.com/akserg/ng2-slim-loading-bar
import { Component, Input } from '@angular/core';
import { SlimLoadingBarService, SlimLoadingBarEventType } from './slim-loading-bar.service';
import { isPresent } from './slim-loading-bar.utils';
/**
 * A Slim Loading Bar component shows message loading progress bar on the top of web page or parent component.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './slim-loading-bar.service';
export var SlimLoadingBarComponent = (function () {
    function SlimLoadingBarComponent(service) {
        this.service = service;
        this.progress = '0';
        this.color = 'firebrick';
        this.height = '2px';
        this.show = true;
    }
    SlimLoadingBarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.service.events.subscribe(function (event) {
            if (event.type === SlimLoadingBarEventType.PROGRESS && isPresent(event.value)) {
                _this.progress = event.value;
            }
            else if (event.type === SlimLoadingBarEventType.COLOR) {
                _this.color = event.value;
            }
            else if (event.type === SlimLoadingBarEventType.HEIGHT) {
                _this.height = event.value;
            }
            else if (event.type === SlimLoadingBarEventType.VISIBLE) {
                _this.show = event.value;
            }
        });
    };
    /** @nocollapse */
    SlimLoadingBarComponent.ctorParameters = function () { return [
        { type: SlimLoadingBarService, },
    ]; };
    SlimLoadingBarComponent.propDecorators = {
        'progress': [{ type: Input },],
        'color': [{ type: Input },],
        'height': [{ type: Input },],
        'show': [{ type: Input },],
    };
SlimLoadingBarComponent.ɵfac = function SlimLoadingBarComponent_Factory(t) { return new (t || SlimLoadingBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SlimLoadingBarService)); };
SlimLoadingBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SlimLoadingBarComponent, selectors: [["ng2-slim-loading-bar"]], inputs: { progress: "progress", color: "color", height: "height", show: "show" }, decls: 2, vars: 10, consts: [[1, "slim-loading-bar"], [1, "slim-loading-bar-progress"]], template: function SlimLoadingBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("width", ctx.progress + "%")("background-color", ctx.color)("color", ctx.color)("height", ctx.height)("opacity", ctx.show ? "1" : "0");
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SlimLoadingBarComponent, [{
        type: Component,
        args: [{
                selector: 'ng2-slim-loading-bar',
                template: "\n<div class=\"slim-loading-bar\">\n    <div class=\"slim-loading-bar-progress\" [style.width]=\"progress + '%'\" [style.backgroundColor]=\"color\" [style.color]=\"color\"\n        [style.height]=\"height\" [style.opacity]=\"show ? '1' : '0'\"></div>\n</div>"
            }]
    }], function () { return [{ type: ɵngcc1.SlimLoadingBarService }]; }, { progress: [{
            type: Input
        }], color: [{
            type: Input
        }], height: [{
            type: Input
        }], show: [{
            type: Input
        }] }); })();
    return SlimLoadingBarComponent;
}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpbS1sb2FkaW5nLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbInNsaW0tbG9hZGluZy1iYXIuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFNTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChDKSAyMDE2IFNlcmdleSBBa29wa29raHlhbnRzXG4vLyBUaGlzIHByb2plY3QgaXMgbGljZW5zZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVQgbGljZW5zZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ha3NlcmcvbmcyLXNsaW0tbG9hZGluZy1iYXJcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNsaW1Mb2FkaW5nQmFyU2VydmljZSwgU2xpbUxvYWRpbmdCYXJFdmVudFR5cGUgfSBmcm9tICcuL3NsaW0tbG9hZGluZy1iYXIuc2VydmljZSc7XG5pbXBvcnQgeyBpc1ByZXNlbnQgfSBmcm9tICcuL3NsaW0tbG9hZGluZy1iYXIudXRpbHMnO1xuLyoqXG4gKiBBIFNsaW0gTG9hZGluZyBCYXIgY29tcG9uZW50IHNob3dzIG1lc3NhZ2UgbG9hZGluZyBwcm9ncmVzcyBiYXIgb24gdGhlIHRvcCBvZiB3ZWIgcGFnZSBvciBwYXJlbnQgY29tcG9uZW50LlxuICovXG5leHBvcnQgdmFyIFNsaW1Mb2FkaW5nQmFyQ29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTbGltTG9hZGluZ0JhckNvbXBvbmVudChzZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAnMCc7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnZmlyZWJyaWNrJztcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAnMnB4JztcbiAgICAgICAgdGhpcy5zaG93ID0gdHJ1ZTtcbiAgICB9XG4gICAgU2xpbUxvYWRpbmdCYXJDb21wb25lbnQucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnNlcnZpY2UuZXZlbnRzLnN1YnNjcmliZShmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBTbGltTG9hZGluZ0JhckV2ZW50VHlwZS5QUk9HUkVTUyAmJiBpc1ByZXNlbnQoZXZlbnQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJvZ3Jlc3MgPSBldmVudC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09IFNsaW1Mb2FkaW5nQmFyRXZlbnRUeXBlLkNPTE9SKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29sb3IgPSBldmVudC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09IFNsaW1Mb2FkaW5nQmFyRXZlbnRUeXBlLkhFSUdIVCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhlaWdodCA9IGV2ZW50LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gU2xpbUxvYWRpbmdCYXJFdmVudFR5cGUuVklTSUJMRSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNob3cgPSBldmVudC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTbGltTG9hZGluZ0JhckNvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICduZzItc2xpbS1sb2FkaW5nLWJhcicsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbjxkaXYgY2xhc3M9XFxcInNsaW0tbG9hZGluZy1iYXJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzbGltLWxvYWRpbmctYmFyLXByb2dyZXNzXFxcIiBbc3R5bGUud2lkdGhdPVxcXCJwcm9ncmVzcyArICclJ1xcXCIgW3N0eWxlLmJhY2tncm91bmRDb2xvcl09XFxcImNvbG9yXFxcIiBbc3R5bGUuY29sb3JdPVxcXCJjb2xvclxcXCJcXG4gICAgICAgIFtzdHlsZS5oZWlnaHRdPVxcXCJoZWlnaHRcXFwiIFtzdHlsZS5vcGFjaXR5XT1cXFwic2hvdyA/ICcxJyA6ICcwJ1xcXCI+PC9kaXY+XFxuPC9kaXY+XCJcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIFNsaW1Mb2FkaW5nQmFyQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IFNsaW1Mb2FkaW5nQmFyU2VydmljZSwgfSxcbiAgICBdOyB9O1xuICAgIFNsaW1Mb2FkaW5nQmFyQ29tcG9uZW50LnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAncHJvZ3Jlc3MnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXG4gICAgICAgICdjb2xvcic6IFt7IHR5cGU6IElucHV0IH0sXSxcbiAgICAgICAgJ2hlaWdodCc6IFt7IHR5cGU6IElucHV0IH0sXSxcbiAgICAgICAgJ3Nob3cnOiBbeyB0eXBlOiBJbnB1dCB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gU2xpbUxvYWRpbmdCYXJDb21wb25lbnQ7XG59KCkpO1xuIl19