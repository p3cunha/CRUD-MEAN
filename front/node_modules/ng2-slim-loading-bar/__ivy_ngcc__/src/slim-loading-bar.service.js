// Copyright (C) 2016 Sergey Akopkokhyants
// This project is licensed under the terms of the MIT license.
// https://github.com/akserg/ng2-slim-loading-bar
import { Injectable } from '@angular/core';
import { isPresent } from './slim-loading-bar.utils';
import { Subject } from 'rxjs/Subject';
import * as ɵngcc0 from '@angular/core';
export var SlimLoadingBarEventType;
(function (SlimLoadingBarEventType) {
    SlimLoadingBarEventType[SlimLoadingBarEventType["PROGRESS"] = 0] = "PROGRESS";
    SlimLoadingBarEventType[SlimLoadingBarEventType["HEIGHT"] = 1] = "HEIGHT";
    SlimLoadingBarEventType[SlimLoadingBarEventType["COLOR"] = 2] = "COLOR";
    SlimLoadingBarEventType[SlimLoadingBarEventType["VISIBLE"] = 3] = "VISIBLE";
})(SlimLoadingBarEventType || (SlimLoadingBarEventType = {}));
export var SlimLoadingBarEvent = (function () {
    function SlimLoadingBarEvent(type, value) {
        this.type = type;
        this.value = value;
    }
    return SlimLoadingBarEvent;
}());
/**
 * SlimLoadingBar service helps manage Slim Loading bar on the top of screen or parent component
 */
export var SlimLoadingBarService = (function () {
    function SlimLoadingBarService() {
        this._progress = 0;
        this._height = '2px';
        this._color = 'firebrick';
        this._visible = true;
        this._intervalCounterId = 0;
        this.interval = 500; // in milliseconds
        this.eventSource = new Subject();
        this.events = this.eventSource.asObservable();
    }
    Object.defineProperty(SlimLoadingBarService.prototype, "progress", {
        get: function () {
            return this._progress;
        },
        set: function (value) {
            if (isPresent(value)) {
                if (value > 0) {
                    this.visible = true;
                }
                this._progress = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.PROGRESS, this._progress));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimLoadingBarService.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            if (isPresent(value)) {
                this._height = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.HEIGHT, this._height));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimLoadingBarService.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            if (isPresent(value)) {
                this._color = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.COLOR, this._color));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SlimLoadingBarService.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            if (isPresent(value)) {
                this._visible = value;
                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.VISIBLE, this._visible));
            }
        },
        enumerable: true,
        configurable: true
    });
    SlimLoadingBarService.prototype.emitEvent = function (event) {
        if (this.eventSource) {
            // Push up a new event
            this.eventSource.next(event);
        }
    };
    SlimLoadingBarService.prototype.start = function (onCompleted) {
        var _this = this;
        if (onCompleted === void 0) { onCompleted = null; }
        // Stop current timer
        this.stop();
        // Make it visible for sure
        this.visible = true;
        // Run the timer with milliseconds iterval
        this._intervalCounterId = setInterval(function () {
            // Increment the progress and update view component
            _this.progress++;
            // If the progress is 100% - call complete
            if (_this.progress === 100) {
                _this.complete();
            }
        }, this.interval);
    };
    SlimLoadingBarService.prototype.stop = function () {
        if (this._intervalCounterId) {
            clearInterval(this._intervalCounterId);
            this._intervalCounterId = null;
        }
    };
    SlimLoadingBarService.prototype.reset = function () {
        this.stop();
        this.progress = 0;
    };
    SlimLoadingBarService.prototype.complete = function () {
        var _this = this;
        this.progress = 100;
        this.stop();
        setTimeout(function () {
            // Hide it away
            _this.visible = false;
            setTimeout(function () {
                // Drop to 0
                _this.progress = 0;
            }, 250);
        }, 250);
    };
    /** @nocollapse */
    SlimLoadingBarService.ctorParameters = function () { return []; };
SlimLoadingBarService.ɵfac = function SlimLoadingBarService_Factory(t) { return new (t || SlimLoadingBarService)(); };
SlimLoadingBarService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SlimLoadingBarService, factory: function (t) { return SlimLoadingBarService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SlimLoadingBarService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return SlimLoadingBarService;
}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpbS1sb2FkaW5nLWJhci5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJzbGltLWxvYWRpbmctYmFyLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUdNO0FBQ047QUFDQTs7Ozs7Z0RBQXNFO0FBQ3RFO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKEMpIDIwMTYgU2VyZ2V5IEFrb3Brb2toeWFudHNcbi8vIFRoaXMgcHJvamVjdCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Frc2VyZy9uZzItc2xpbS1sb2FkaW5nLWJhclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQcmVzZW50IH0gZnJvbSAnLi9zbGltLWxvYWRpbmctYmFyLnV0aWxzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xuZXhwb3J0IHZhciBTbGltTG9hZGluZ0JhckV2ZW50VHlwZTtcbihmdW5jdGlvbiAoU2xpbUxvYWRpbmdCYXJFdmVudFR5cGUpIHtcbiAgICBTbGltTG9hZGluZ0JhckV2ZW50VHlwZVtTbGltTG9hZGluZ0JhckV2ZW50VHlwZVtcIlBST0dSRVNTXCJdID0gMF0gPSBcIlBST0dSRVNTXCI7XG4gICAgU2xpbUxvYWRpbmdCYXJFdmVudFR5cGVbU2xpbUxvYWRpbmdCYXJFdmVudFR5cGVbXCJIRUlHSFRcIl0gPSAxXSA9IFwiSEVJR0hUXCI7XG4gICAgU2xpbUxvYWRpbmdCYXJFdmVudFR5cGVbU2xpbUxvYWRpbmdCYXJFdmVudFR5cGVbXCJDT0xPUlwiXSA9IDJdID0gXCJDT0xPUlwiO1xuICAgIFNsaW1Mb2FkaW5nQmFyRXZlbnRUeXBlW1NsaW1Mb2FkaW5nQmFyRXZlbnRUeXBlW1wiVklTSUJMRVwiXSA9IDNdID0gXCJWSVNJQkxFXCI7XG59KShTbGltTG9hZGluZ0JhckV2ZW50VHlwZSB8fCAoU2xpbUxvYWRpbmdCYXJFdmVudFR5cGUgPSB7fSkpO1xuZXhwb3J0IHZhciBTbGltTG9hZGluZ0JhckV2ZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTbGltTG9hZGluZ0JhckV2ZW50KHR5cGUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFNsaW1Mb2FkaW5nQmFyRXZlbnQ7XG59KCkpO1xuLyoqXG4gKiBTbGltTG9hZGluZ0JhciBzZXJ2aWNlIGhlbHBzIG1hbmFnZSBTbGltIExvYWRpbmcgYmFyIG9uIHRoZSB0b3Agb2Ygc2NyZWVuIG9yIHBhcmVudCBjb21wb25lbnRcbiAqL1xuZXhwb3J0IHZhciBTbGltTG9hZGluZ0JhclNlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNsaW1Mb2FkaW5nQmFyU2VydmljZSgpIHtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSAwO1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSAnMnB4JztcbiAgICAgICAgdGhpcy5fY29sb3IgPSAnZmlyZWJyaWNrJztcbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ludGVydmFsQ291bnRlcklkID0gMDtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IDUwMDsgLy8gaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgIHRoaXMuZXZlbnRTb3VyY2UgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IHRoaXMuZXZlbnRTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbGltTG9hZGluZ0JhclNlcnZpY2UucHJvdG90eXBlLCBcInByb2dyZXNzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvZ3Jlc3M7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRFdmVudChuZXcgU2xpbUxvYWRpbmdCYXJFdmVudChTbGltTG9hZGluZ0JhckV2ZW50VHlwZS5QUk9HUkVTUywgdGhpcy5fcHJvZ3Jlc3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNsaW1Mb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUsIFwiaGVpZ2h0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRFdmVudChuZXcgU2xpbUxvYWRpbmdCYXJFdmVudChTbGltTG9hZGluZ0JhckV2ZW50VHlwZS5IRUlHSFQsIHRoaXMuX2hlaWdodCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2xpbUxvYWRpbmdCYXJTZXJ2aWNlLnByb3RvdHlwZSwgXCJjb2xvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KG5ldyBTbGltTG9hZGluZ0JhckV2ZW50KFNsaW1Mb2FkaW5nQmFyRXZlbnRUeXBlLkNPTE9SLCB0aGlzLl9jb2xvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2xpbUxvYWRpbmdCYXJTZXJ2aWNlLnByb3RvdHlwZSwgXCJ2aXNpYmxlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KG5ldyBTbGltTG9hZGluZ0JhckV2ZW50KFNsaW1Mb2FkaW5nQmFyRXZlbnRUeXBlLlZJU0lCTEUsIHRoaXMuX3Zpc2libGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2xpbUxvYWRpbmdCYXJTZXJ2aWNlLnByb3RvdHlwZS5lbWl0RXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRTb3VyY2UpIHtcbiAgICAgICAgICAgIC8vIFB1c2ggdXAgYSBuZXcgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuZXZlbnRTb3VyY2UubmV4dChldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNsaW1Mb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAob25Db21wbGV0ZWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKG9uQ29tcGxldGVkID09PSB2b2lkIDApIHsgb25Db21wbGV0ZWQgPSBudWxsOyB9XG4gICAgICAgIC8vIFN0b3AgY3VycmVudCB0aW1lclxuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgLy8gTWFrZSBpdCB2aXNpYmxlIGZvciBzdXJlXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIC8vIFJ1biB0aGUgdGltZXIgd2l0aCBtaWxsaXNlY29uZHMgaXRlcnZhbFxuICAgICAgICB0aGlzLl9pbnRlcnZhbENvdW50ZXJJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIEluY3JlbWVudCB0aGUgcHJvZ3Jlc3MgYW5kIHVwZGF0ZSB2aWV3IGNvbXBvbmVudFxuICAgICAgICAgICAgX3RoaXMucHJvZ3Jlc3MrKztcbiAgICAgICAgICAgIC8vIElmIHRoZSBwcm9ncmVzcyBpcyAxMDAlIC0gY2FsbCBjb21wbGV0ZVxuICAgICAgICAgICAgaWYgKF90aGlzLnByb2dyZXNzID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLmludGVydmFsKTtcbiAgICB9O1xuICAgIFNsaW1Mb2FkaW5nQmFyU2VydmljZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsQ291bnRlcklkKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsQ291bnRlcklkKTtcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsQ291bnRlcklkID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2xpbUxvYWRpbmdCYXJTZXJ2aWNlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgIH07XG4gICAgU2xpbUxvYWRpbmdCYXJTZXJ2aWNlLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gSGlkZSBpdCBhd2F5XG4gICAgICAgICAgICBfdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBEcm9wIHRvIDBcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9ncmVzcyA9IDA7XG4gICAgICAgICAgICB9LCAyNTApO1xuICAgICAgICB9LCAyNTApO1xuICAgIH07XG4gICAgU2xpbUxvYWRpbmdCYXJTZXJ2aWNlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgU2xpbUxvYWRpbmdCYXJTZXJ2aWNlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIFNsaW1Mb2FkaW5nQmFyU2VydmljZTtcbn0oKSk7XG4iXX0=